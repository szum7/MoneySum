public List<ExcelTransactionExtended> Run(List<ExcelTransaction> tr1, List<ExcelTransactionExtended> tr2)
        {
            tr1 = tr1.OrderBy(x => x.AccountingDate).ToList();
            tr2 = tr2.OrderBy(x => x.AccountingDate).ToList();

            List<ExcelTransactionExtended> merged = new List<ExcelTransactionExtended>();
            int i = 0, j = 0;
            while (i < tr1.Count && j < tr2.Count)
            {
                if (tr1[i].AccountingDate < tr2[j].AccountingDate)
                {
                    merged.Add((ExcelTransactionExtended)tr1[i]);
                    i++;
                }
                else if (tr1[i].AccountingDate > tr2[j].AccountingDate)
                {
                    merged.Add(tr2[j]);
                    j++;
                }
                else
                {
                    var interval = new List<ExcelTransactionExtended>();
                    var date = tr1[i].AccountingDate;
                    while (i < tr1.Count && tr1[i].AccountingDate == date)
                    {
                        if (!interval.Any(x => x.ContentId == tr1[i].ContentId))
                        {
                            interval.Add((ExcelTransactionExtended)tr1[i]);
                        }
                        i++;
                    }
                    while (j < tr2.Count && date == tr2[j].AccountingDate)
                    {
                        if (!interval.Any(x => x.ContentId == tr2[j].ContentId))
                        {
                            interval.Add(tr2[j]);
                        }
                        j++;
                    }
                    merged.AddRange(interval);
                }
            }
            while (i < tr1.Count)
            {
                merged.Add((ExcelTransactionExtended)tr1[i]);
                i++;
            }
            while (j < tr2.Count)
            {
                merged.Add(tr2[j]);
                j++;
            }

            return merged;
        }





        public static List<DateTime> GetDatesList(DateTime from, DateTime to)
        {
            return Enumerable
                .Range(0, 1 + to.Subtract(from).Days)
                .Select(offset => from.AddDays(offset))
                .ToList();
        }

        // TODO test if from and to is in the array + test if all x.01
        public static List<DateTime> GetMonthsList(DateTime from, DateTime to)
        {
            var months = new List<DateTime>();

            for (var dt = from; dt <= to; dt = dt.AddMonths(1))
            {
                months.Add(dt);
            }

            return months;
        }



    private groupBy<T>(collection: Array<T>, property: string): Array<T> {
        var i = 0, val, index,
            values = [], result = [];
        for (; i < collection.length; i++) {
            val = collection[i][property];
            index = values.indexOf(val);
            if (index > -1)
                result[index].push(collection[i]);
            else {
                values.push(val);
                result.push([collection[i]]);
            }
        }
        return result;
    }


            var path = Path.GetDirectoryName(new Uri(Assembly.GetEntryAssembly().CodeBase).LocalPath);
            var pa = Directory.GetParent(path);




int ReadExcel(
    string path, 
    int rowId, 
    ExcelSheet<T> excelSheet, 
    Dictionary<string, Dictionary<DateTime, ExcelTransactionExtended>> groupDict)
{
    ISheet sheet;

    using (var stream = new FileStream(path, FileMode.Open))
    {
        stream.Position = 0;
        if (Path.GetExtension(path) == ".xls")
        {
            HSSFWorkbook hssfwb = new HSSFWorkbook(stream); //This will read the Excel 97-2000 formats  
            sheet = hssfwb.GetSheetAt(0); //get first sheet from workbook  
        }
        else
        {
            XSSFWorkbook hssfwb = new XSSFWorkbook(stream); //This will read 2007 Excel format  
            sheet = hssfwb.GetSheetAt(0); //get first sheet from workbook   
        }

        if (excelSheet.IsHeaderEmpty())
        {
            IRow headerRow = sheet.GetRow(0);
            int cellCount = headerRow.LastCellNum;
            for (int j = 0; j < cellCount; j++)
            {
                ICell cell = headerRow.GetCell(j);
                if (cell == null || string.IsNullOrWhiteSpace(cell.ToString()))
                    continue;

                excelSheet.Header.Add(cell.ToString());
            }
        }

        int i = sheet.LastRowNum;
        if (IsReadFromTheBeginning)
        {
            i = sheet.FirstRowNum + 1;
        }

        while ((IsReadFromTheBeginning && i <= sheet.LastRowNum) // from the beginning
            || (!IsReadFromTheBeginning && i >= (sheet.FirstRowNum + 1))) // from end
        {
            IRow row = sheet.GetRow(i);
            if (row == null)
            {
                i = this.GetNextIteration(i);
                continue;
            }
            if (row.Cells.All(d => d.CellType == CellType.Blank))
            {
                i = this.GetNextIteration(i);
                continue;
            }
            if (row.GetCell(10) != null && row.GetCell(10).ToString() == "1") // IsOmitted column
            {
                i = this.GetNextIteration(i);
                continue;
            }

            T tr = new T();

            tr.Id = rowId;
            if (row.GetCell(0) != null) tr.AccountingDate = row.GetCell(0).DateCellValue;
            if (row.GetCell(1) != null) tr.TransactionId =  row.GetCell(1).ToString();
            if (row.GetCell(2) != null) tr.Type =           row.GetCell(2).ToString();
            if (row.GetCell(3) != null) tr.Account =        row.GetCell(3).ToString();
            if (row.GetCell(4) != null) tr.AccountName =    row.GetCell(4).ToString();
            if (row.GetCell(5) != null) tr.PartnerAccount = row.GetCell(5).ToString();
            if (row.GetCell(6) != null) tr.PartnerName =    row.GetCell(6).ToString();
            if (row.GetCell(7) != null) tr.Sum =            double.Parse(row.GetCell(7).ToString());
            if (row.GetCell(8) != null) tr.Currency =       row.GetCell(8).ToString();
            if (row.GetCell(9) != null) tr.Message =        row.GetCell(9).ToString();

            if (tr is ExcelTransactionExtended)
            {
                // Add grouped transactions on previous dates
                var removeableKey = new Dictionary<string, DateTime>();
                foreach (var keyValue in groupDict)
                {
                    foreach (var innerKeyValue in keyValue.Value)
                    {
                        if (innerKeyValue.Key < tr.AccountingDate)
                        {
                            excelSheet.AddNewRow(innerKeyValue.Value as T);
                            removeableKey.Add(keyValue.Key, innerKeyValue.Key);
                        }
                    }
                }
                foreach (var keyValue in removeableKey)
                {
                    groupDict[keyValue.Key].Remove(keyValue.Value);
                }

                ExcelTransactionExtended cast = tr as ExcelTransactionExtended;

                if (row.GetCell(12) != null) cast.TagNames =    this.GetIntList(row.GetCell(12).ToString());
                if (row.GetCell(13) != null) cast.TagGroupId =  row.GetCell(13).ToString();

                if (row.GetCell(11) != null)
                {
                    string groupId = row.GetCell(11).ToString();
                    var endDate = this.GetEndDayDate(tr.AccountingDate);

                    if (groupDict.ContainsKey(groupId)) // GroupId already exists
                    {
                        var dateDict = groupDict[groupId];

                        if (dateDict.ContainsKey(endDate)) // DateTime already exists
                        {
                            var item = dateDict[endDate];
                            item.Sum += cast.Sum;
                            item.GroupId = groupId;
                            item.TagGroupId = cast.TagGroupId; // need to set it, since it may not already be set
                            item.TagNames = cast.TagNames; // need to set it, since it may not already be set
                        }
                        else
                        {
                            dateDict.Add(endDate, cast);
                        }
                    }
                    else // GroupId is new
                    {
                        var dateDict = new Dictionary<DateTime, ExcelTransactionExtended>();

                        cast.AccountingDate = endDate;
                        cast.GroupId = groupId;

                        dateDict.Add(endDate, cast);

                        groupDict.Add(groupId, dateDict);
                    }
                }
                else
                {
                    excelSheet.AddNewRow(tr);
                    rowId++;
                }
            }
            else
            {
                excelSheet.AddNewRow(tr);
                rowId++;
            }

            i = this.GetNextIteration(i);
        }

        foreach (var keyValue in groupDict)
        {
            foreach (var innerKeyValue in keyValue.Value)
            {
                excelSheet.AddNewRow(innerKeyValue.Value as T);
            }
        }
        groupDict = new Dictionary<string, Dictionary<DateTime, ExcelTransactionExtended>>();

    }
    return rowId;
}


==================================================================
==================================================================
==================================================================
==================================================================




using ExcelWorkerApp.Components.MergeTransaction;
using ExcelWorkerApp.Components.ReadExcel;
using ExcelWorkerApp.Components.WriteExcel;
using ExcelWorkerApp.Model;
using ExcelWorkerApp.Test;
using MoneyStats.BL;
using System;

namespace ExcelWorkerApp
{
    class Program
    {
        static void Main(string[] args)
        {
            var excelReader = new ExcelReader<ExcelTransaction>();
            var excelWriter = new ExcelWriter();
            var transactionRepo = new TransactionRepository();
            var mergedFileReader = new ExcelReader<ExcelTransactionExtended>();
            var transactionMerger = new TransactionMerger();


            // Test section
#if false
            var list = (new MergeTest()).MergeTestMethod();
            return;
#endif

            // Read many bank-exported excel files
#if true
            ExcelSheet<ExcelTransaction> allFiles = excelReader.Read(@"C:\Users\Aron_Szocs\Documents\Bank", "*.xls");
#endif

            // Merge read files
#if true
            excelReader.TruncateData(allFiles);
#endif

            // Write merged file to an excel file
#if true
            excelWriter.Run(allFiles, @"C:\Users\Aron_Szocs\Documents\Bank\Merged\Merged.xls");
#endif

            // => User edits the file
#if true
            Console.WriteLine("========================");
            Console.WriteLine("USER INTERACTION NEEDED!");
            Console.WriteLine("========================");
            Console.WriteLine("You should edit the merged file now. Type 'OK' to read the merged file, or 'EXIT' to exit the program.");
            string input = "";
            while (input.ToLower() != "ok")
            {
                input = Console.ReadLine();
                if (input.ToLower() == "exit")
                {
                    Console.WriteLine("Program exited.");
                    return;
                }
            }
#endif

            // Read one merged excel file
#if true
            mergedFileReader.IsReadFromTheBeginning = true;
            var mergedFile = mergedFileReader.Read(@"C:\Users\Aron_Szocs\Documents\Bank\Merged\Merged.xls");
#endif

            // Load already existing transactions from database
#if true
            var transactionsFromDB = transactionRepo.GetWithEntities();
#endif

            // Merge db data and merged-excel file data
#if true
            var mergedList = transactionMerger.Run(transactionsFromDB, mergedFile.Transactions);
            excelWriter.Run(mergedList, @"C:\Users\Aron_Szocs\Documents\Bank\Merged\MergedList.xls");
            var unsavedTransactionList = transactionMerger.GetNewRows(mergedList);
#endif

            // Write to db
#if true
            transactionRepo.SmartSave(unsavedTransactionList);
#endif

            Console.WriteLine("PROGRAM ENDED.");
        }
    }
}
